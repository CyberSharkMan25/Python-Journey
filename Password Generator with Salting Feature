#password generator with password salting capabilities

import random #imports the random library for the random.choice.
import string #imports string constants.


def generate_salted_password(length: int = 16): #uses option type hinting to get the password length to 16 automatically if not length is specified by the user.
  alphabet = string.ascii_letters + string.punctuation + string.digits #stores all the ascii_code and punctuation marks that can be used in the password.
  for i in range(6):
    salt_1 = ''.join(random.choice(alphabet) for i in range(i)) #creates the salting before the raw password
    salt_2 = ''.join(random.choice(alphabet) for i in range(i)) #creates the salting after the raw password
  raw_password = ''.join(random.choice(alphabet) for i in range(length)) #creates a password by randomly choosing charcters from the range of values defined in the alphabet variable.
  print(f"this is the raw password before the salting {raw_password}")
  print(f"this salt goes at the beginning {salt_1}")
  print(f"this salt goes at the end {salt_2}")
  salted_password = salt_1 + raw_password + salt_2 #creates the final salted password
  return salted_password

user_input = str(input("Do you want to generate a secure password?")).upper() #asks the user if they want a password to be generated.

while user_input == "YES": #while the user says yes to if they want a password generated, a new password is generated.
  if user_input == "YES":
    print("Wonderful!")
    print(f'Here is your secure, 16 digit password {generate_salted_password()}') #provides the generated password in a formatted string.
  else:
    print("Okay, goodbye!")
  user_input = str(input("Do you want to generate a secure password?")).upper() #reprompts the user if they want another password generated.

